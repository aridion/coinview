{"ast":null,"code":"var _jsxFileName = \"/Users/aron/Documents/code_training/coinview/components/Prices.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\n\nconst Prices = props => {\n  const {\n    0: coinData,\n    1: setCoinData\n  } = useState({\n    currency: props.bpi.bpi.USD.code,\n    rate: props.bpi.bpi.USD.rate,\n    sign: props.bpi.bpi.USD.symbol.fromCharCode(parseInt(unicode, 16))\n  });\n  const coinDataArray = Object.entries(props.bpi.bpi);\n\n  const onDropdownChange = num => {\n    return {\n      currency: coinDataArray[num][1].code,\n      rate: coinDataArray[num][1].rate\n    };\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(\"select\", {\n    onChange: selected => setCoinData(onDropdownChange(selected.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"US Dollars\"), __jsx(\"option\", {\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"GB Pounds\"), __jsx(\"option\", {\n    value: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"Euros\")), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, `Bitcoin rate for ${coinData.currency} : ${coinData.rate}`)));\n};\n\nexport default Prices;","map":{"version":3,"sources":["/Users/aron/Documents/code_training/coinview/components/Prices.js"],"names":["useState","Prices","props","coinData","setCoinData","currency","bpi","USD","code","rate","sign","symbol","fromCharCode","parseInt","unicode","coinDataArray","Object","entries","onDropdownChange","num","selected","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BJ,QAAQ,CAAC;AACvCK,IAAAA,QAAQ,EAAEH,KAAK,CAACI,GAAN,CAAUA,GAAV,CAAcC,GAAd,CAAkBC,IADW;AAEvCC,IAAAA,IAAI,EAAEP,KAAK,CAACI,GAAN,CAAUA,GAAV,CAAcC,GAAd,CAAkBE,IAFe;AAGvCC,IAAAA,IAAI,EAAER,KAAK,CAACI,GAAN,CAAUA,GAAV,CAAcC,GAAd,CAAkBI,MAAlB,CAAyBC,YAAzB,CAAsCC,QAAQ,CAACC,OAAD,EAAU,EAAV,CAA9C;AAHiC,GAAD,CAAxC;AAMA,QAAMC,aAAa,GAAGC,MAAM,CAACC,OAAP,CAAef,KAAK,CAACI,GAAN,CAAUA,GAAzB,CAAtB;;AAEA,QAAMY,gBAAgB,GAAIC,GAAD,IAAS;AAChC,WAAO;AACLd,MAAAA,QAAQ,EAAEU,aAAa,CAACI,GAAD,CAAb,CAAmB,CAAnB,EAAsBX,IAD3B;AAELC,MAAAA,IAAI,EAAEM,aAAa,CAACI,GAAD,CAAb,CAAmB,CAAnB,EAAsBV;AAFvB,KAAP;AAID,GALD;;AAOA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,QAAQ,EAAGW,QAAD,IACRhB,WAAW,CAACc,gBAAgB,CAACE,QAAQ,CAACC,MAAT,CAAgBC,KAAjB,CAAjB,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,EAME;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,EAOE;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,oBAAmBnB,QAAQ,CAACE,QAAS,MAAKF,QAAQ,CAACM,IAAK,EAA9D,CADF,CAVF,CADF;AAgBD,CAhCD;;AAkCA,eAAeR,MAAf","sourcesContent":["import { useState } from \"react\";\n\nconst Prices = (props) => {\n  const [coinData, setCoinData] = useState({\n    currency: props.bpi.bpi.USD.code,\n    rate: props.bpi.bpi.USD.rate,\n    sign: props.bpi.bpi.USD.symbol.fromCharCode(parseInt(unicode, 16)),\n  });\n\n  const coinDataArray = Object.entries(props.bpi.bpi);\n\n  const onDropdownChange = (num) => {\n    return {\n      currency: coinDataArray[num][1].code,\n      rate: coinDataArray[num][1].rate,\n    };\n  };\n\n  return (\n    <div>\n      <select\n        onChange={(selected) =>\n          setCoinData(onDropdownChange(selected.target.value))\n        }\n      >\n        <option value=\"0\">US Dollars</option>\n        <option value=\"1\">GB Pounds</option>\n        <option value=\"2\">Euros</option>\n      </select>\n      <ul>\n        <li>{`Bitcoin rate for ${coinData.currency} : ${coinData.rate}`}</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Prices;\n"]},"metadata":{},"sourceType":"module"}